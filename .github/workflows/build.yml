name: build

on:
  workflow_call:
    inputs:
      target:
        description: The target device configuration
        required: true
        type: string
      image:
        description: The image url
        required: false
        type: string
  workflow_dispatch:
    inputs:
      target:
        type: choice
        description: The target device configuration
        options:
        - aosp_arm64
        - aosp_x86_64
        - aosp_cf_riscv64_phone
      image:
        description: The image url
        required: false
        type: string

jobs:
  archive:
    runs-on: ubuntu-24.04

    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Install dependencies
        if: contains(inputs.target, '_cf_')
        run: |
          sudo apt-get update
          sudo apt-get install -y "linux-modules-extra-$(uname -r)" erofs-utils erofsfuse
          sudo modprobe erofs

      - name: Install cuttlefish
        if: contains(inputs.target, '_cf_')
        run: |
          ID=$(curl -fsSL https://ci.android.com/builds/branches/aosp-main/status.json | yq '.targets[] | select(.name == "aosp_cf_x86_64_phone-trunk_staging-userdebug") | .last_known_good_build')
          ARTIFACT_URL=$(node <<EOF
          $(curl -fsSL "https://ci.android.com/builds/submitted/$ID/aosp_cf_x86_64_phone-trunk_staging-userdebug/latest/cvd-host_package.tar.gz" | grep 'var JSVariables = ')
          console.log(JSVariables['artifactUrl'])
          EOF
          )
          sudo mkdir /opt/android-cuttlefish
          curl -fsSL "$ARTIFACT_URL" | sudo tar -xzC /opt/android-cuttlefish
          echo /opt/android-cuttlefish/bin | tee -a "$GITHUB_PATH"

      - name: Download Image
        if: inputs.image != ''
        run: |
          curl -fsSLo img.zip ${{ inputs.image }}
          unzip img.zip

      - name: Download Image
        if: inputs.image == ''
        run: |
          ID=$(curl -fsSL https://ci.android.com/builds/branches/aosp-main/status.json | yq '.targets[] | select(.name == "${{ inputs.target }}-trunk_staging-userdebug") | .last_known_good_build')
          ARTIFACT_URL=$(node <<EOF
          $(curl -fsSL "https://ci.android.com/builds/submitted/$ID/${{ inputs.target }}-trunk_staging-userdebug/latest/${{ inputs.target }}-img-$ID.zip" | grep 'var JSVariables = ')
          console.log(JSVariables['artifactUrl'])
          EOF
          )
          curl -fsSLo img.zip "$ARTIFACT_URL"
          unzip img.zip

      - name: Mount system.img
        run: |
          mkdir SYSTEM
          if test -f super.img; then
            simg2img super.img unsparsed.img
            lpunpack unsparsed.img
            if [ "$(blkid -o value -s TYPE system_a.img)" = "erofs" ]; then
              sudo erofsfuse -o allow_other system_a.img SYSTEM
            else
              sudo mount -o loop,ro system_a.img SYSTEM
            fi
          else
            sudo mount -o loop,ro system.img SYSTEM
          fi

      - name: Mount com.android.runtime.apex
        run: |
          SYSTEM_EXT=SYSTEM/system_ext
          if test -L $SYSTEM_EXT; then
            SYSTEM_EXT=SYSTEM/system/system_ext
          fi

          if ! test -d $SYSTEM_EXT/apex/com.android.runtime; then
            unzip SYSTEM/system/apex/com.android.runtime.apex apex_payload.img

            sudo mount -t tmpfs tmpfs $SYSTEM_EXT
            mkdir -p $SYSTEM_EXT/apex/com.android.runtime
            sudo mount -o loop,ro apex_payload.img $SYSTEM_EXT/apex/com.android.runtime
          fi

      - name: List Contents
        run: |
          cd SYSTEM
          sudo find . -ls

      - name: Archive
        run: |
          cd SYSTEM
          sudo ../libexec/ls-files | sudo tar -cvzf ../${{ inputs.target }}.tar.gz --no-recursion -T-

      - name: Upload Artifact
        uses: actions/upload-artifact@v4
        with:
          name: build-${{ inputs.target }}
          path: ${{ inputs.target }}.tar.gz
          if-no-files-found: error
          compression-level: 0
