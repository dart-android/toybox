name: build

on:
  workflow_call:
    inputs:
      builds:
        description: The builds matrix
        required: true
        type: string

jobs:
  pre-archive:
    runs-on: ubuntu-latest

    outputs:
      artifacts: ${{ steps.artifacts.outputs.artifacts }}

    steps:
      - name: Checkout
        uses: actions/checkout@v5

      - name: Prepare Archive Matrix
        id: artifacts
        env:
          BUILDS: ${{ inputs.builds }}
        run: |
          node <<'EOF' | tee -a "$GITHUB_OUTPUT"
          console.log(`artifacts=${JSON.stringify(JSON.parse(process.env.BUILDS).flatMap(build => build.artifacts))}`)
          EOF

  archive:
    needs: [pre-archive]

    runs-on: ubuntu-latest

    strategy:
      fail-fast: false
      matrix:
        include: ${{ fromJSON(needs.pre-archive.outputs.artifacts) }}

    steps:
      - name: Checkout
        uses: actions/checkout@v5

      - name: Install dependencies
        if: startsWith(matrix.target, 'aosp_cf_') || !startsWith(matrix.target, 'aosp_')
        run: |
          sudo apt-get update
          sudo apt-get install -y "linux-modules-extra-$(uname -r)" erofs-utils erofsfuse
          sudo modprobe erofs

      - name: Install cuttlefish
        if: startsWith(matrix.target, 'aosp_cf_') || !startsWith(matrix.target, 'aosp_')
        run: |
          sudo mkdir /opt/android-cuttlefish
          curl -fsSL "$(libexec/cvd-host_package)" | sudo tar -xzC /opt/android-cuttlefish
          echo /opt/android-cuttlefish/bin | tee -a "$GITHUB_PATH"

      - name: Download Image
        run: |
          curl -fsSLo ${{ matrix.artifact }} "${{ matrix.artifactUrl }}"
          unzip ${{ matrix.artifact }}

      - name: Mount system.img
        run: |
          mkdir SYSTEM
          if test -f super.img; then
            simg2img super.img unsparsed.img
            lpunpack unsparsed.img
            if [ "$(blkid -o value -s TYPE system_a.img)" = "erofs" ]; then
              sudo erofsfuse -o allow_other system_a.img SYSTEM
            else
              sudo mount -o loop,ro system_a.img SYSTEM
            fi
          else
            sudo mount -o loop,ro system.img SYSTEM
          fi

      - name: Mount com.android.runtime.apex
        run: |
          SYSTEM_EXT=SYSTEM/system_ext
          if test -L $SYSTEM_EXT; then
            SYSTEM_EXT=SYSTEM/system/system_ext
          fi

          if ! test -d $SYSTEM_EXT/apex/com.android.runtime; then
            unzip SYSTEM/system/apex/com.android.runtime.apex apex_payload.img

            sudo mount -t tmpfs tmpfs $SYSTEM_EXT
            mkdir -p $SYSTEM_EXT/apex/com.android.runtime
            if [ "$(blkid -o value -s TYPE apex_payload.img)" = "erofs" ]; then
              sudo erofsfuse -o allow_other apex_payload.img $SYSTEM_EXT/apex/com.android.runtime
            else
              sudo mount -o loop,ro apex_payload.img $SYSTEM_EXT/apex/com.android.runtime
            fi
          fi

      - name: List Contents
        run: |
          cd SYSTEM
          sudo find . -ls

      - name: Archive
        run: |
          cd SYSTEM
          sudo ../libexec/ls-files | sudo tar -cvzf ../${{ matrix.target }}.tar.gz --no-recursion -T-

      - name: Upload Artifact
        uses: actions/upload-artifact@v4
        with:
          name: build-${{ matrix.target }}-${{ matrix.buildId }}
          path: ${{ matrix.target }}.tar.gz
          if-no-files-found: error
          compression-level: 0


  build:
    needs: [archive]

    runs-on: ubuntu-latest

    permissions:
      packages: write

    strategy:
      fail-fast: false
      matrix:
        include: ${{ fromJSON(inputs.builds) }}

    steps:
      - name: Checkout
        uses: actions/checkout@v5

      - name: Download Artifact
        uses: actions/download-artifact@v5
        with:
          pattern: build-*-${{ matrix.buildId }}
          merge-multiple: true

      - name: Prepare
        id: prepare
        run: |
          mkdir build
          find . \( -name 'aosp_arm64.tar.gz' -o -name 'aosp_cf_arm64_*.tar.gz' -o -name 'arm64-v8a.tar.gz' \) -print0 | xargs -0 -I {} mv {} build/aarch64.tar.gz
          find . \( -name 'aosp_arm.tar.gz' -o -name 'aosp_cf_arm_*.tar.gz' -o -name 'armeabi-v7a.tar.gz' \) -print0 | xargs -0 -I {} mv {} build/armv7.tar.gz
          find . \( -name 'aosp_x86_64.tar.gz' -o -name 'aosp_cf_x86_64_*.tar.gz' -o -name 'x86_64.tar.gz' \) -print0 | xargs -0 -I {} mv {} build/x86_64.tar.gz
          find . \( -name 'aosp_x86.tar.gz' -o -name 'aosp_cf_x86_*.tar.gz' -o -name 'x86.tar.gz' \) -print0 | xargs -0 -I {} mv {} build/x86.tar.gz
          find . \( -name 'aosp_riscv64.tar.gz' -o -name 'aosp_cf_riscv64_*.tar.gz' -o -name 'riscv64.tar.gz' \) -print0 | xargs -0 -I {} mv {} build/riscv64.tar.gz
          echo "platforms=$(find build -mindepth 1 -maxdepth 1 -print0 | xargs -0 -I {} basename {} .tar.gz | sed -e 's,aarch64,linux/arm64,;s,armv7,/linux/arm/v7,;s,x86_64,linux/amd64,;s,x86,linux/386,;s,riscv64,linux/riscv64,' | paste -s -d , -)" | tee -a "$GITHUB_OUTPUT"

      - name: Docker Metadata
        id: docker-metadata
        uses: docker/metadata-action@v5
        with:
          images: |
            ghcr.io/${{ github.repository }}
          tags: |
            type=edge
            type=raw,value=${{ github.ref_name }}
            type=raw,value=latest,enable=${{ matrix.branch == 'aosp-android-latest-release' }}
            type=schedule

      - name: Set up QEMU
        run: docker run --privileged --rm registry.fedoraproject.org/fedora-minimal /bin/sh -c "microdnf install --assumeyes --nodocs --setopt=install_weak_deps=False qemu-user-static systemd-udev && mount binfmt_misc -t binfmt_misc /proc/sys/fs/binfmt_misc && /usr/lib/systemd/systemd-binfmt --unregister && /usr/lib/systemd/systemd-binfmt"

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Login to GitHub Container Registry
        uses: docker/login-action@v3
        with:
          registry: ghcr.io
          username: ${{ github.actor }}
          password: ${{ github.token }}

      - name: Build and push
        uses: docker/build-push-action@v6
        with:
          context: .
          platforms: ${{ steps.prepare.outputs.platforms }}
          push: ${{ github.ref_type == 'tag' }}
          tags: ${{ steps.docker-metadata.outputs.tags }}
          labels: ${{ steps.docker-metadata.outputs.labels }}

  tag:
    needs: [build]

    if: github.ref == format('refs/heads/{0}', github.event.repository.default_branch)

    runs-on: ubuntu-latest

    strategy:
      fail-fast: false
      matrix:
        include: ${{ fromJSON(inputs.builds) }}

    steps:
      - name: Checkout
        uses: actions/checkout@v5
        with:
          fetch-depth: 0
          ssh-key: ${{ secrets.DEPLOY_KEY }}

      - name: Tag
        run: |
          git config user.email 41898282+github-actions[bot]@users.noreply.github.com
          git config user.name github-actions[bot]
          if test -n "$(git tag -l ${{ matrix.buildId }})"; then
            echo "Tag ${{ matrix.buildId }} has already been created."
            exit 0
          fi
          git tag -m ${{ matrix.buildId }} ${{ matrix.buildId }}
          echo "Tagged ${{ matrix.buildId }}."
          git push origin refs/tags/${{ matrix.buildId }}
          echo "Pushed tag ${{ matrix.buildId }}."
